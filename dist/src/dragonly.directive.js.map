{"version":3,"sources":["../../src/dragonly.directive.ts"],"names":[],"mappings":"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","file":"dragonly.directive.js","sourceRoot":"","sourcesContent":["import { Directive, ElementRef, Input, OnInit, Renderer2 } from '@angular/core';\n\n@Directive({selector: '[dragOnly]'})\nexport class DragOnlyDirective implements OnInit {\n\n    /**\n     * current element's position\n     *\n     * @type {EventPosition}\n     */\n    private elementPosition: EventPosition;\n\n    /**\n     * current mouse position\n     *\n     * @type {EventPosition}\n     */\n    private mousePosition: EventPosition;\n\n    /**\n     * array of functions - event listeners - for updating\n     * positions and destroying other global event handlers\n     *\n     * @type {Array<Function>}\n     */\n    private handlersToDestroy: Array<Function>;\n\n    /**\n     * sessionStorage key for element's position saving\n     *\n     * @type {string}\n     */\n    private sessionStorageKey: string;\n\n    /**\n     * dragOnly identifier - useful when there are more\n     * elements which use this component\n     *\n     * @type {string|number}\n     */\n    @Input() dragOnly: string|number;\n\n    /**\n     * constructs the DraggableDirective. Injects the\n     * elementRef and the Renderer Object to be more\n     * platform agnostic\n     *\n     * @param {ElementRef} elementRef\n     * @param {Renderer} renderer\n     */\n    constructor(private elementRef: ElementRef, private renderer: Renderer2) {}\n\n    /**\n     * initializes component's variables with default values\n     * and sets sessionKey based on passed values to dragOnly\n     * input. Also creates main event listener for drag only\n     * component and sets the first state of element passed.\n     */\n    ngOnInit(): void {\n        this.handlersToDestroy    = [];\n        this.sessionStorageKey    = 'dragOnlyElementPosition' + this.dragOnly;\n        this.elementPosition      = this.calculateInitialPosition();\n        this.renderer.listen(this.elementRef.nativeElement, 'mousedown', (ev) => this.init(ev));\n        this.update();\n    }\n\n    /**\n     * initializes event handlers for mouseMove and\n     * mouseUp events on document object and also sets the\n     * mousePosition of the mouseDown event, so then\n     * we can calculate the movement vector which is used\n     * to move the element. We use vectors because you don't\n     * always click on the center of the document so we\n     * cannot set the position from the mouse coordinates.\n     *\n     * @param {MouseEvent} event\n     */\n    init(event: MouseEvent): void {\n        this.mousePosition = new EventPosition(event.clientX, event.clientY);\n        this.handlersToDestroy    = [\n            this.renderer.listen('document', 'mousemove', (ev: MouseEvent) => this.calculate(ev)),\n            this.renderer.listen('document', 'mouseup', (ev: MouseEvent) => this.removeHandlers()),\n            this.renderer.listen('document', 'contextmenu', (ev: MouseEvent) => this.removeHandlers())\n        ];\n    }\n\n    /**\n     * calculates the position difference vector, sets new\n     * mousePosition and calculates the new position\n     * of the element.\n     *\n     * @param {MouseEvent} event\n     */\n    calculate(event: MouseEvent): void {\n        const moveVector           = this.mousePosition.diff(new EventPosition(event.clientX, event.clientY));\n        this.mousePosition         = this.mousePosition.add(moveVector);\n        this.elementPosition       = this.elementPosition.add(moveVector);\n        this.update();\n    }\n\n    /**\n     * removes event handlers created on mouseDown init\n     * event handler. Also stores the current position\n     * in sessionStorage, so it's restored after page\n     * refreshes.\n     */\n    removeHandlers(): void {\n        for (const handler of this.handlersToDestroy) {\n            if (typeof handler === 'function') handler();\n        }\n        this.store();\n    }\n\n    /**\n     * stores the position of the element in sessionStorage\n     */\n    store(): void {\n        try {\n            sessionStorage.setItem(this.sessionStorageKey, JSON.stringify(this.elementPosition));\n        } catch (e) {\n            console.log(`\n            Your browser does not support sessionStorage and will \n            not store the position of the element after it's closed.\n            Error message: ` + e.message);\n        }\n    }\n\n    /**\n     * reads the position of the element from sessionStorage\n     *\n     * @returns {EventPosition}\n     */\n    read(): EventPosition|boolean {\n        try {\n            const data = sessionStorage.getItem(this.sessionStorageKey);\n            if (!data) return false;\n            const parsedData = JSON.parse(data);\n            if (parsedData && parsedData.x && parsedData.y)\n                return new EventPosition(parsedData.x, parsedData.y);\n        } catch (e) {\n            console.log(`\n            Your browser does not support sessionStorage and will \n            not store the position of the element after it's closed.\n            Error message: ` + e.message);\n        }\n        return false;\n    }\n\n    /**\n     * updates element's top and left positions in pixels\n     * based on the current position set by handlers.\n     */\n    update(): void {\n        this.renderer.setStyle(this.elementRef.nativeElement, 'top', this.elementPosition.y + 'px');\n        this.renderer.setStyle(this.elementRef.nativeElement, 'left', this.elementPosition.x + 'px');\n    }\n\n    /**\n     * returns very initial position of the element based\n     * on saved value in sessionStorage. If nothing is\n     * saved, position of the screen's center is returned.\n     *\n     * @returns {EventPosition}\n     */\n    calculateInitialPosition(): EventPosition {\n        const positionBefore = this.read();\n        if (positionBefore instanceof EventPosition) return positionBefore;\n        return new EventPosition((window.innerWidth / 2), window.innerHeight / 2);\n    }\n\n}\n\n/**\n * helper class for working with positions\n */\nexport class EventPosition {\n\n    /**\n     * constructs EventPosition object based\n     * on x and y coordinates.\n     *\n     * @param {number} x\n     * @param {number} y\n     */\n    constructor(public x: number, public y: number) {}\n\n    /**\n     * calculates difference between current\n     * EventPosition and passed EventPosition.\n     * Returns new EventPosition with calculated\n     * difference as coordinates.\n     *\n     * @param {EventPosition} ev\n     * @returns {EventPosition}\n     */\n    public diff(ev: EventPosition): EventPosition {\n        return new EventPosition(-this.x + ev.x, -this.y + ev.y);\n    }\n\n    /**\n     * adds passed EventPosition's coordinates to\n     * current EventPosition's coordinates and\n     * returns new EventPosition with calculated\n     * values as coordinates.\n     *\n     * @param {EventPosition} ev\n     * @returns {EventPosition}\n     */\n    public add(ev: EventPosition): EventPosition {\n        return new EventPosition(this.x + ev.x, this.y + ev.y);\n    }\n\n}"]}